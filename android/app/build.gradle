plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
    // - Other plugins
    // Note : generatedFilesBaseDir is deprecated in 0.9.2, because why would you include and use generated code anyways right?
    // it's like you won't use it's stubs or somethings. https://github.com/google/protobuf-gradle-plugin/pull/636
    // ... stupid crap ... other apps like 'jbitcoin' did migrate to not generating inside the 'src/main' but mine works like this.
    id "com.google.protobuf" version "0.9.1"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

// A protobuf version that should exists both with protoc + protoc-gen-lite (compile) and protobuf-javalite
def protocVer = "3.19.6"
def protobufLiteVer = "3.19.6"

// com.android.application + kotlin-android
android {
    namespace = "com.yongf.flutter.packetcaptureflutter"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.yongf.flutter.packetcaptureflutter"
        minSdkVersion = flutter.minSdkVersion
        targetSdkVersion = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName

        testInstrumentationRunner = "android.support.test.runner.AndroidJUnitRunner"
        // handles the androidx.room sql thing
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation" : "$projectDir/schemas".toString()]
            }
        }
    }

    sourceSets {
        main {
            java {
                // TODO : Determine release || debug, both files existing will cause issues and will require "gradlew clear" before compile
                //        It is required for the proto/ directory
                // srcDirs += "$buildDir/generated/source/proto/"

                // lol, this is solution to compile java inside kotlin path.
                srcDirs += "$projectDir/src/main/kotlin"
            }
            proto {
                srcDir "src/main/proto"
            }
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug

            // Fun fact : disabling minify fixes the application crash. Now it doesn't function due to an SSL malfunction, but will try to fix.
            // debuggable true
            minifyEnabled false // Or true if you want to enable ProGuard/R8
            shrinkResources false
            buildConfigField "boolean", "ENABLE_SSL_DEBUG", "true"
        }
    }
}

// com.google.profobuf
// [i] https://github.com/google/protobuf-gradle-plugin/blob/master/examples/exampleProject/build.gradle
protobuf {
    // This is apparently where you add this : https://stackoverflow.com/a/52685219
    generatedFilesBaseDir = "$projectDir/src/main/protoc-gen"

    protoc {
        artifact = "com.google.protobuf:protoc:$protocVer"
    }

    generateProtoTasks {
        // [!!] 'ofSourceSet("main")' ignores OS.android
        all().each { task ->
            task.builtins {
                create("java") {
                    option("lite")
                }
            }
            // task.plugins {
                // // java { }
                // // kotlin { }
            // }
        }
    }
}

// dev.flutter.flutter-gradle-plugin
flutter {
    source = "../.."
}

dependencies {
    implementation project(":pcf-core")

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "androidx.annotation:annotation:1.8.0"

    // For transiency, use api instead of implementation : https://stackoverflow.com/a/44493379
    implementation "com.google.protobuf:protobuf-javalite:$protobufLiteVer"
    // api "com.google.protobuf:protobuf-kotlin-lite:$protobufLiteVer"
    implementation ("com.squareup.retrofit2:converter-protobuf:2.9.0") {
        exclude group: "com.google.protobuf", module: "protobuf-java"
    }

    // Room (because we need more convoluted ways of storing a class)
    implementation "androidx.room:room-runtime:2.4.0"
    annotationProcessor "androidx.room:room-compiler:2.4.0"
    implementation "androidx.sqlite:sqlite:2.1.0"

    // --
    // https://stackoverflow.com/questions/52590101/could-not-find-method-testimplementation-for-arguments-junitjunit4-12
    // Newer kotlin fixes this.
    testImplementation "junit:junit:4.12"
    androidTestImplementation "com.android.support.test:runner:1.0.2"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:3.0.2"
}
