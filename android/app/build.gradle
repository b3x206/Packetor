def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new Exception("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion 28

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        main {
            // Define the proto file directory
            proto {
                srcDir 'src/main/proto'
                include '**/*.proto'
            }
        }
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.yongf.flutter.packetcaptureflutter"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        javalite {
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
            }
        }
    }
}

dependencies {
    implementation project(':pcf-core')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation group: 'com.android.support', name: 'appcompat-v7', version: '28.0.0'
    implementation "com.google.protobuf:protobuf-lite:3.0.1"
    // implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.7.0'
    implementation ('com.squareup.retrofit2:converter-protobuf:2.5.0') {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }

    // Room
    implementation "android.arch.persistence.room:runtime:1.1.1"
    annotationProcessor "android.arch.persistence.room:compiler:1.1.1"

    // --
    // ?? : LOOOOOOOOOOOOOOL
    // https://stackoverflow.com/questions/52590101/could-not-find-method-testimplementation-for-arguments-junitjunit4-12
    // If your system locale is Turkish or anything that uses 'İ', you need to export these dependencies with that character
    // This is a Java toUpperCase locale related encoding problem
    // ... what
    // --
    // TODO : Create a powershell script that configures the gradle imports according to the current system locale.
    // This will mutate files, but can't do much about it. If the 'I' variant works fine in linox will change to that and use the 'İ' variant locally
    // --
    // Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;
    testİmplementation 'junit:junit:4.12'
    androidTestİmplementation 'com.android.support.test:runner:1.0.2'
    androidTestİmplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    // Thread.CurrentThread.CurrentCulture = prev;
}
